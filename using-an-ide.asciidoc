---
title: Using an IDE
order: 250
layout: page
---

== Importing a project

Extract the project zip downloaded from https://vaadin.com/start#vaadin10 and import it to your IDE

=== Import to Eclipse:

1. `File -> Import...`

2. `Maven -> Existing Maven Projects`, press Next

3. Choose a path to the application folder, and click finish.

=== Import to IntelliJ IDEA:

1. 'File -> Open...`

2. Choose a path to the application folder

== Building and Running Application

This is the tutorial how to run the application with an IDE. More about how to build and run the application from command line at link:running-building-packaging.asciidoc[Running, building and packaging] page.

After the application is opened in an IDE and all dependencies are resolved there are several ways to run it.

=== Run as a Java Application

In Eclipse right click on the application folder in Package Explorer -> Run As -> Java Application. After that pick  `Application.java` as the entry point class.
  
In IntelliJ IDEA right click on `Application.java`  -> Run 'Application.main()' or click on the green arrow at the `main` method line in the `Application.java`. 

image::img/idea-run-main.png[Idea Run Main,align=left]

NOTE: There is a known issue with IDEA when a provided dependency is not in the classpath (https://youtrack.jetbrains.com/issue/IDEA-107048). So if you are running the IDEA build older than 181.1818 then it is needed to set `compile` scope for a `spring-boot-starter-tomcat` dependency. Since `compile` is default scope in maven, the dependency should be defined in the `pom.xml` as: 
```
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-tomcat</artifactId>
</dependency>
```
  
=== Run as a Maven build

In Eclipse in Package Explorer right click on the application root folder or the `pom.xml` file. Choose Run As -> Maven Build... and specify `spring-boot:run` as the run goal. Give the configuration a name and click Run.

Once the Maven Run configuration is saved you can find it in `Run Configurations`

image::img/eclipse-run-conf.png[Eclipse Run Configuration,align=left]

In IDEA, choose Run -> Edit Configurations... in the main menu. Then in the Run/Debug Configuration dialog box, click `+` on the toolbar and select `Maven` as the configuration type. Enter `spring-boot:run` as the command line, press Ok.

image::img/idea-edit-conf.png[IDEA Edit Configuration,align=left]

image::img/idea-run.png[IDEA Run,align=left]

Press the green arrow to run.

More about how to create and edit run/debug configuration in Intellij IDEA: https://www.jetbrains.com/help/idea/creating-and-editing-run-debug-configurations.html

To make a production build use the `clean install -Dvaadin.productionMode` maven goal. After a production build is done in `application-folder-path/target' you can find the .war file which is ready to be deployed to an application server.

== Debugging the Application

In Eclipse same configurations can be used, but should be run from `Debug configurations`.

In IDEA pick the configuration needed and click `Debug Application` button.

== Automatic Restart and Live Reload

`spring-boot-devtools` can be used for fast application restarts during development.

Add a `spring-boot-devtools` dependency into `pom.xml`

```
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-devtools</artifactId>
    <optional>true</optional>
    <scope>runtime</scope>
</dependency>
```

Fork the process used to run the application by changing spring-boot-maven-plugin configuration

```
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
    <version>${spring-boot.version}</version>
    <configuration>
        <fork>true</fork>
    </configuration>
</plugin>
```

Create and place into the `src/main/resources/META-INF` folder the following spring-devtools.properties

```
restart.include.flow=/flow.*\.jar
restart.include.vaadin=/vaadin.*\.jar
```
This means we explicitly define that such jars are unmodifiable and they shouldn't be reloaded on each application restart.
More info at https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html#using-boot-devtools-customizing-classload[Customizing the restart classloader].

Optionally you might want to avoid the data generator to be run on each single reload, therefore, make the H2 database store entities in the file-system instead of in memory by adding the following lines to the `src/main/resources/application.properties` file

```
spring.datasource.url=jdbc:h2:file:~/bakery-test-data
spring.jpa.hibernate.ddl-auto=update
```

To trigger a restart an update to one or several files in the classpath is needed.

In Eclipse that happens automatically after saving modified file.

In IntelliJ IDEA updating classes in the classpath can be done manually `Build -> Build Project`

Live reload is supported and browser extensions can be found at http://livereload.com/extensions/.
